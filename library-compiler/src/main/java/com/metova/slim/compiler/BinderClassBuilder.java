package com.metova.slim.compiler;

import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.util.Date;

import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;

public class BinderClassBuilder {

    private static final int NO_LAYOUT_ID = -1;

    private final String mPackageName;
    private final TypeElement mClassElement;
    private final Element mIBinderElement;

    private final ExecutableElement mLayoutMethodElement;
    private final ExecutableElement mExtrasMethodElement;

    private MethodSpec.Builder mLayoutMethodSpec;
    private MethodSpec.Builder mExtrasMethodSpec;

    public BinderClassBuilder(String packageName, TypeElement classElement, Element binderElement) {
        mPackageName = packageName;
        mClassElement = classElement;
        mIBinderElement = binderElement;

        ExecutableElement layoutMethodElement = null;
        ExecutableElement extrasMethodElement = null;
        for (Element element : binderElement.getEnclosedElements()) {
            if (element.getKind() == ElementKind.METHOD) {
                String elementName = element.getSimpleName().toString();
                if (elementName.equals("bindLayout")) {
                    layoutMethodElement = (ExecutableElement) element;
                } else if (elementName.equals("bindExtras")) {
                    extrasMethodElement = (ExecutableElement) element;
                }
            }
        }

        mLayoutMethodElement = layoutMethodElement;
        mExtrasMethodElement = extrasMethodElement;
    }

    public void writeLayout(int layoutId) {
        mLayoutMethodSpec = createLayoutMethodSpec(layoutId);
    }

    private MethodSpec.Builder createLayoutMethodSpec(int layoutId) {
        return MethodSpec.overriding(mLayoutMethodElement)
                .addCode("arg1.bindLayout(arg0, $L);\n", layoutId);
    }

    public void writeExtra(String fieldName, String extraKey) {
        if (mExtrasMethodSpec == null) {
            mExtrasMethodSpec = createExtrasMethodSpec();
        }

        mExtrasMethodSpec.addCode("target.$L = arg1.getExtra(target, \"$L\");\n", fieldName, extraKey);
    }

    private MethodSpec.Builder createExtrasMethodSpec() {
        return MethodSpec.overriding(mExtrasMethodElement)
                .addCode("$T target = ($T) arg0;\n", mClassElement, mClassElement);
    }

    public JavaFile buildJavaFile(String classSuffix) {
        if (mLayoutMethodSpec == null) {
            mLayoutMethodSpec = createLayoutMethodSpec(NO_LAYOUT_ID);
        }
        if (mExtrasMethodSpec == null) {
            mExtrasMethodSpec = createExtrasMethodSpec();
        }

        TypeSpec typeSpec = TypeSpec.classBuilder(mClassElement.getSimpleName() + classSuffix)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addSuperinterface(TypeName.get(mIBinderElement.asType()))
                .addMethod(mLayoutMethodSpec.build())
                .addMethod(mExtrasMethodSpec.build())
                .build();

        return JavaFile.builder(mPackageName, typeSpec)
                .addFileComment("Generated by Slim. Do not modify!\n")
                .addFileComment(new Date(System.currentTimeMillis()).toString())
                .build();
    }

    public String getCanonicalName() {
        return mPackageName + "." + mClassElement.getSimpleName();
    }
}
