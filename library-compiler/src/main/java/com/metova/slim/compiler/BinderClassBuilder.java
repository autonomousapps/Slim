package com.metova.slim.compiler;

import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;

public class BinderClassBuilder {

    private static final String KEY_LAYOUT = "getLayoutId";

    private final String mPackageName;
    private final String mClassName;

    private TypeSpec.Builder mTypeSpecBuilder;
    private Set<TypeName> mInterfaceSet = new HashSet<>();
    private Map<String, MethodSpec> mMethodSpecMap = new HashMap<>();

    public BinderClassBuilder(String packageName, String className) {
        mPackageName = packageName;
        mClassName = className;

        mTypeSpecBuilder = TypeSpec.classBuilder(className)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
    }

    public void writeLayout(Class<?> interfaceCls, ExecutableElement methodElement, int layoutId) {
        mInterfaceSet.add(TypeName.get(interfaceCls));
        mMethodSpecMap.put(KEY_LAYOUT, MethodSpec.overriding(methodElement)
                .addCode("return $L;\n", layoutId)
                .build());
    }

    public JavaFile buildJavaFile() {
        mTypeSpecBuilder.addSuperinterfaces(mInterfaceSet);
        mTypeSpecBuilder.addMethods(mMethodSpecMap.values());

        return JavaFile.builder(mPackageName, mTypeSpecBuilder.build())
                .addFileComment("Generated by Slim. Do not modify!\n")
                .addFileComment(new Date(System.currentTimeMillis()).toString())
                .build();
    }

    public String getCanonicalName() {
        return mPackageName + "." + mClassName;
    }
}
